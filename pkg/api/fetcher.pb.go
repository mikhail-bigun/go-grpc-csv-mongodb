// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fetcher.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	fetcher.proto

It has these top-level messages:
	FetchRequest
	FetchResponse
	Filetype
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FetchRequest struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *FetchRequest) Reset()                    { *m = FetchRequest{} }
func (m *FetchRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchRequest) ProtoMessage()               {}
func (*FetchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FetchRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type FetchResponse struct {
	FileFormat *Filetype `protobuf:"bytes,2,opt,name=file_format,json=fileFormat" json:"file_format,omitempty"`
	File       []byte    `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
}

func (m *FetchResponse) Reset()                    { *m = FetchResponse{} }
func (m *FetchResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchResponse) ProtoMessage()               {}
func (*FetchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FetchResponse) GetFileFormat() *Filetype {
	if m != nil {
		return m.FileFormat
	}
	return nil
}

func (m *FetchResponse) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

type Filetype struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (m *Filetype) Reset()                    { *m = Filetype{} }
func (m *Filetype) String() string            { return proto.CompactTextString(m) }
func (*Filetype) ProtoMessage()               {}
func (*Filetype) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Filetype) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func init() {
	proto.RegisterType((*FetchRequest)(nil), "api.FetchRequest")
	proto.RegisterType((*FetchResponse)(nil), "api.FetchResponse")
	proto.RegisterType((*Filetype)(nil), "api.Filetype")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Fetcher service

type FetcherClient interface {
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (Fetcher_FetchClient, error)
}

type fetcherClient struct {
	cc *grpc.ClientConn
}

func NewFetcherClient(cc *grpc.ClientConn) FetcherClient {
	return &fetcherClient{cc}
}

func (c *fetcherClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (Fetcher_FetchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Fetcher_serviceDesc.Streams[0], c.cc, "/api.Fetcher/Fetch", opts...)
	if err != nil {
		return nil, err
	}
	x := &fetcherFetchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Fetcher_FetchClient interface {
	Recv() (*FetchResponse, error)
	grpc.ClientStream
}

type fetcherFetchClient struct {
	grpc.ClientStream
}

func (x *fetcherFetchClient) Recv() (*FetchResponse, error) {
	m := new(FetchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Fetcher service

type FetcherServer interface {
	Fetch(*FetchRequest, Fetcher_FetchServer) error
}

func RegisterFetcherServer(s *grpc.Server, srv FetcherServer) {
	s.RegisterService(&_Fetcher_serviceDesc, srv)
}

func _Fetcher_Fetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FetcherServer).Fetch(m, &fetcherFetchServer{stream})
}

type Fetcher_FetchServer interface {
	Send(*FetchResponse) error
	grpc.ServerStream
}

type fetcherFetchServer struct {
	grpc.ServerStream
}

func (x *fetcherFetchServer) Send(m *FetchResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Fetcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Fetcher",
	HandlerType: (*FetcherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fetch",
			Handler:       _Fetcher_Fetch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fetcher.proto",
}

func init() { proto.RegisterFile("fetcher.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0x4d, 0xae, 0xc2, 0x20,
	0x14, 0x85, 0x1f, 0xaf, 0xef, 0xf7, 0xb6, 0x4d, 0xf4, 0x8e, 0x1a, 0x07, 0x86, 0x30, 0xea, 0x88,
	0x98, 0x3a, 0x76, 0xca, 0x02, 0x70, 0x01, 0xa6, 0x9a, 0xdb, 0x48, 0x52, 0x05, 0x29, 0x1d, 0xb8,
	0x7b, 0x03, 0xad, 0x49, 0x47, 0x7c, 0x1c, 0xbe, 0xe4, 0x1c, 0xa0, 0xec, 0x28, 0x5c, 0xae, 0xe4,
	0xa5, 0xf3, 0x36, 0x58, 0xcc, 0x5a, 0x67, 0x04, 0x87, 0x42, 0xc5, 0x54, 0xd3, 0x63, 0xa4, 0x21,
	0xe0, 0x0a, 0xb2, 0xd1, 0xf7, 0x15, 0xe3, 0xac, 0xfe, 0xd7, 0x11, 0xc5, 0x11, 0xca, 0xd9, 0x18,
	0x9c, 0xbd, 0x0f, 0x84, 0x12, 0xf2, 0xce, 0xf4, 0x74, 0xea, 0xac, 0xbf, 0xb5, 0xa1, 0xfa, 0xe4,
	0xac, 0xce, 0x9b, 0x52, 0xb6, 0xce, 0x48, 0x65, 0x7a, 0x0a, 0x4f, 0x47, 0x1a, 0xa2, 0xa1, 0x92,
	0x80, 0x08, 0x5f, 0xf1, 0x56, 0x65, 0x9c, 0xd5, 0x85, 0x4e, 0x2c, 0xb6, 0xf0, 0xf7, 0x76, 0xe3,
	0x7b, 0x3c, 0xe7, 0xce, 0xc4, 0xcd, 0x01, 0x7e, 0xd5, 0x34, 0x16, 0x1b, 0xf8, 0x4e, 0x88, 0xeb,
	0xa9, 0x62, 0xb1, 0x76, 0x83, 0xcb, 0x68, 0x9a, 0x27, 0x3e, 0x76, 0xec, 0xfc, 0x93, 0x7e, 0xb8,
	0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x39, 0xc5, 0x7e, 0xf8, 0xf2, 0x00, 0x00, 0x00,
}
